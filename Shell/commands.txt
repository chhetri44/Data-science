Print working directory

pwd

List files

ls

ls /file/path/here

ls -F -R pathfile

-F everything below with / after folder name and * after executable files
-R everything below a directory

Absolute path starts with /
relative path can be a name directly


Change directory

cd
cd ..

.. = one directory up
. = current directory
~ = home directory

Copy file

cp file1 file2

movefile

mv files driectory

removefile

rm files

remove directory
rmdir (or -r)

make directory
mkdir

View file contents

cat filename

View file with pages

less filenames

spacebar to cycle pages
:p for previous file
:n for next file
:q for quiting

View top 10 line of file
head filenames

View top 5 line of file
head -n 5 filenames

Use tail with the flag -n +7 to display all but the first six lines of seasonal/spring.csv.

tail -n +7 filename

select columns

cut -d , -f 2:5,8 filename

delimiter is comma and selcted columns 2 to 5 and 8

head and tail select rows, cut selects columns, and grep selects lines according to what they contain. In its simplest form, grep takes a piece of text followed by one or more filenames and prints all of the lines in those files that contain that text. For example, grep bicuspid seasonal/winter.csv prints lines from winter.csv that contain "bicuspid".

grep can search for patterns as well; we will explore those in the next course. What's more important right now is some of grep's more common flags:

-c: print a count of matching lines rather than the lines themselves
-h: do not print the names of files when searching multiple files
-i: ignore case (e.g., treat "Regression" and "regression" as matches)
-l: print the names of files that contain matches, not the matches
-n: print line numbers for matching lines
-v: invert the match, i.e., only show lines that don't match

history run with !commandname or ! command sequencenumber


